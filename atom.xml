<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>羸弱的小金鱼</title>
  <subtitle>收集研究前端技术，偶尔客串翻译有趣日推 &amp; 博文</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ykloveyxk.github.io/"/>
  <updated>2017-03-21T12:36:17.000Z</updated>
  <id>https://ykloveyxk.github.io/</id>
  
  <author>
    <name>羸弱的小金鱼</name>
    <email>562872810@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue-login 通过一个项目带你走进vue全栈开发</title>
    <link href="https://ykloveyxk.github.io/2017/03/21/vue-login-%E9%80%9A%E8%BF%87%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9Bvue%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/"/>
    <id>https://ykloveyxk.github.io/2017/03/21/vue-login-通过一个项目带你走进vue全栈开发/</id>
    <published>2017-03-21T12:18:32.000Z</published>
    <updated>2017-03-21T12:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> 这是一个基于 vue &amp; axios &amp; nodejs(express) 的登录／注册demo，面向 vue 初学者，场景虽简单，但五脏俱全。有前后台，涵盖非常多的 vue 及其相关技术的基本操作。有详细的注释，帮助大家快速上手 vue 。且我整理了一些在vue全栈开发过程中，有可能会用到的技术文章，希望大家能在这些前辈们身上有所收获。  </p>
<p>当然如果您觉得这篇文章 or 这个项目对您的学习有所帮助，请不吝点个 star 鼓励一下，当然如果存在问题，也非常希望您能提交 issues 或者在 <a href="https://ykloveyxk.github.io/">我的博客</a>任意文章下留言，我会及时处理回复，和大家一起进步。  </p>
</blockquote>
<a id="more"></a>
<h2 id="项目技术栈"><a href="#项目技术栈" class="headerlink" title="项目技术栈"></a>项目技术栈</h2><hr>
<ul>
<li>前台：vue &amp; vue-router &amp; vuex &amp; vue-cli(webpack) &amp; element-ui</li>
<li>后台： nodejs (express)</li>
<li>前后台交互： axios</li>
<li>单点登录： jsonwebtoken</li>
</ul>
<h2 id="Build-Setup"><a href="#Build-Setup" class="headerlink" title="Build Setup"></a>Build Setup</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># install dependencies</span></div><div class="line">npm install</div><div class="line"></div><div class="line"><span class="comment"># serve with hot reload at localhost:8080</span></div><div class="line">npm run dev</div><div class="line"></div><div class="line"><span class="comment"># build for production with minification</span></div><div class="line">npm run build</div><div class="line"></div><div class="line"><span class="comment"># build for production and view the bundle analyzer report</span></div><div class="line">npm run build --report</div><div class="line"></div><div class="line"><span class="comment"># start server</span></div><div class="line">node server.js</div></pre></td></tr></table></figure>
<h2 id="项目开发推荐阅读"><a href="#项目开发推荐阅读" class="headerlink" title="项目开发推荐阅读"></a>项目开发推荐阅读</h2><hr>
<blockquote>
<p>因为项目难度并不是很高，且我也在代码中写了较多注释，所以我不会细节到行去解释代码，而是会搜集、分享一些前辈们书写的相关技术文章，相信大家踩在巨人的肩膀上，能学到更多。  </p>
</blockquote>
<h3 id="1-vue-cli-生成项目主体框架"><a href="#1-vue-cli-生成项目主体框架" class="headerlink" title="1. vue-cli 生成项目主体框架"></a>1. vue-cli 生成项目主体框架</h3><p>使用 vue-cli 的优点是方便快捷，能快速生成项目的主体结构。但不能一味依赖这种开发方式，还是要了解其中的技术细节。此处推荐几篇文章：</p>
<ul>
<li><a href="https://github.com/vuejs/vue-cli" target="_blank" rel="external">vue-cli官方文档</a></li>
<li><a href="https://doc.webpack-china.org/" target="_blank" rel="external">webpack2 中文文档</a></li>
<li><a href="https://juejin.im/post/584e48b2ac502e006c74a120" target="_blank" rel="external">vue-cli#2.0 webpack 配置分析 - 掘金</a>（强烈推荐）</li>
</ul>
<h3 id="2-后台入口文件-server-js"><a href="#2-后台入口文件-server-js" class="headerlink" title="2. 后台入口文件 server.js"></a>2. 后台入口文件 server.js</h3><p>后台主要作用是接收前台请求，处理完成后返回一个含有所需数据或状态的api接口，供前台去调用。这需要你了解熟悉 nodejs 或任意一种后端语言，以 nodejs 为例，有以下文章推荐你去阅读：</p>
<ul>
<li><a href="http://javascript.ruanyifeng.com/" target="_blank" rel="external">阮一峰老师的 js 教程（含node）</a> （强烈建议把js部分也看看）</li>
<li><a href="https://www.zybuluo.com/XiangZhou/note/208532" target="_blank" rel="external">Express 4.x API - 作业部落 Cmd Markdown 编辑阅读器</a>（express 4.x 的中文文档）</li>
<li><a href="http://koa.bootcss.com/" target="_blank" rel="external">koa</a> （最近常出现的一个node框架，有兴趣的可以去了解一下 ）</li>
</ul>
<h3 id="3-axios前后台交互"><a href="#3-axios前后台交互" class="headerlink" title="3.  axios前后台交互"></a>3.  axios前后台交互</h3><p>vue 和 node 的交互还是主要采用 ajax 来进行，此处就介绍一个主流交互工具 axios，当然别的工具例如 vue-resource、jquery 都可以。但是 vue-resource 不维护了，jquery如果只是为了 ajax 就引入又太庞大，所以我个人是比较推荐axios。此处久推荐这几篇文章吧：</p>
<ul>
<li><a href="https://juejin.im/entry/58b2532f2f301e006c0a2d80/detail" target="_blank" rel="external">axios全攻略</a> （我写的，羞射😳，但我个人觉得很值得阅读）</li>
<li><a href="https://blog.ygxdxx.com/2017/02/01/Vuex2&amp;Axios-Develop/" target="_blank" rel="external">Vuex2和Axios的开发 | Hope’s Blog</a> （也是掘金作者，让理论照进现实）</li>
</ul>
<h3 id="4-vue-全家桶"><a href="#4-vue-全家桶" class="headerlink" title="4. vue 全家桶"></a>4. vue 全家桶</h3><p>顾名思义就是我们熟知的 vue + vue-router + vuex + … ，<br>虽然还有很多的组件，但是基础都是 前三个。这块儿首推官方文档，我个人认为 vue 的成功除开自身素质过硬外，最大的优势就是文档写的非常的浅显易懂！所以学 vue 一定要多读官方文档。此处放出连接：</p>
<ul>
<li><a href="https://cn.vuejs.org/" target="_blank" rel="external">Vue.js</a></li>
<li><a href="https://router.vuejs.org/zh-cn/" target="_blank" rel="external">Vue-router</a></li>
<li><a href="https://vuex.vuejs.org/zh-cn/" target="_blank" rel="external">Vuex</a></li>
</ul>
<p>当然掘金上也有许多的详解文章，也推荐大家去看看。</p>
<h3 id="5-组件库"><a href="#5-组件库" class="headerlink" title="5. 组件库"></a>5. 组件库</h3><p>随着 vue 的不断发展，社区越来越活跃，因此产生了许多组件库，此处我就推荐一个我个人使用的最多的由饿了么团队开发的组件库element-ui。</p>
<ul>
<li><a href="http://element.eleme.io/#/zh-CN" target="_blank" rel="external">element-ui</a></li>
</ul>
<h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><p>开发其实除了冥思苦想外，很多时候要多读别人的源码，从中才能有所启发。放出几个demo：</p>
<ul>
<li><a href="https://github.com/superman66/vue-axios-github" target="_blank" rel="external">一个使用 github api写的登录程序</a> （掘金作者，我的这篇文章也是受他启发）</li>
<li><a href="https://molunerfinn.com/Vue+Koa/" target="_blank" rel="external">vue + koa + mysql 的 todos demo </a>（想了解 koa + mysql 如何在vue中运用可以看看）</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>当然纸上学来终觉浅，绝知此事要躬行。学完理论就需要去实践，所以希望大家多多去看看别人的代码，然后写写小demo。一定会事半功倍。希望和大家共同进步。</p>
<p>然后我无意发现有人未经过我同意就转发我的文章。而且未出现任何我的相关信息。我的观点是我写文章是为了方便大家，督促自己，所以转就转了，不需要我的同意，但是哪怕不出现我的名字，也请务必注一个 <strong>转</strong> 字，不要把他当作自己的文章来用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 这是一个基于 vue &amp;amp; axios &amp;amp; nodejs(express) 的登录／注册demo，面向 vue 初学者，场景虽简单，但五脏俱全。有前后台，涵盖非常多的 vue 及其相关技术的基本操作。有详细的注释，帮助大家快速上手 vue 。且我整理了一些在vue全栈开发过程中，有可能会用到的技术文章，希望大家能在这些前辈们身上有所收获。  &lt;/p&gt;
&lt;p&gt;当然如果您觉得这篇文章 or 这个项目对您的学习有所帮助，请不吝点个 star 鼓励一下，当然如果存在问题，也非常希望您能提交 issues 或者在 &lt;a href=&quot;https://ykloveyxk.github.io/&quot;&gt;我的博客&lt;/a&gt;任意文章下留言，我会及时处理回复，和大家一起进步。  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="vuejs javascript" scheme="https://ykloveyxk.github.io/tags/vuejs-javascript/"/>
    
  </entry>
  
  <entry>
    <title>axios全攻略</title>
    <link href="https://ykloveyxk.github.io/2017/02/25/axios%E5%85%A8%E6%94%BB%E7%95%A5/"/>
    <id>https://ykloveyxk.github.io/2017/02/25/axios全攻略/</id>
    <published>2017-02-24T19:07:19.000Z</published>
    <updated>2017-02-25T08:59:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>随着 vuejs 作者尤雨溪发布消息，不再继续维护vue-resource，并推荐大家使用 axios 开始，axios 被越来越多的人所了解。本来想在网上找找详细攻略，突然发现，axios 的官方文档本身就非常详细！！有这个还要什么自行车！！所以推荐大家学习这种库，最好详细阅读其官方文档。大概翻译了一下 axios 的官方文档，相信大家只要吃透本文再加以实践，axios 就是小意思啦！！</p>
<p>如果您觉得本文对您有帮助，不妨点个赞或关注收藏一下，您的鼓励对我非常重要。</p>
<a id="more"></a>
<h2 id="axios-简介"><a href="#axios-简介" class="headerlink" title="axios 简介"></a>axios 简介</h2><p>axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，它本身具有以下特征：</p>
<hr>
<ul>
<li>从浏览器中创建  XMLHttpRequest</li>
<li>从 node.js 发出 http 请求</li>
<li>支持 Promise API</li>
<li>拦截请求和响应</li>
<li>转换请求和响应数据</li>
<li>取消请求</li>
<li>自动转换JSON数据</li>
<li>客户端支持防止 <a href="http://baike.baidu.com/link?url=iUceAfgyfJOacUtjPgT4ifaSOxDULAc_MzcLEOTySflAn5iLlHfMGsZMtthBm5sK4y6skrSvJ1HOO2qKtV1ej_" target="_blank" rel="external">CSRF/XSRF</a></li>
</ul>
<h2 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h2><p><img src="http://p1.bpimg.com/567571/991b798df8c9a528.png" alt=""></p>
<h2 id="引入方式："><a href="#引入方式：" class="headerlink" title="引入方式："></a>引入方式：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ npm install axios</div><div class="line">$ cnpm install axios <span class="comment">//taobao源</span></div><div class="line">$ bower install axios</div><div class="line">或者使用cdn：</div><div class="line">&lt;script src=<span class="string">"https://unpkg.com/axios/dist/axios.min.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="举个栗子："><a href="#举个栗子：" class="headerlink" title="举个栗子："></a>举个栗子：</h2><hr>
<h3 id="执行-GET-请求"><a href="#执行-GET-请求" class="headerlink" title="执行 GET 请求"></a>执行 GET 请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 向具有指定ID的用户发出请求</span></div><div class="line">axios.get(<span class="string">'/user?ID=12345'</span>)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(response);</div><div class="line">  &#125;)</div><div class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(error);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line"><span class="comment">// 也可以通过 params 对象传递参数</span></div><div class="line">axios.get(<span class="string">'/user'</span>, &#123;</div><div class="line">    <span class="attr">params</span>: &#123;</div><div class="line">      <span class="attr">ID</span>: <span class="number">12345</span></div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(response);</div><div class="line">  &#125;)</div><div class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(error);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<h3 id="执行-POST-请求"><a href="#执行-POST-请求" class="headerlink" title="执行 POST 请求"></a>执行 POST 请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">axios.post(<span class="string">'/user'</span>, &#123;</div><div class="line">    <span class="attr">firstName</span>: <span class="string">'Fred'</span>,</div><div class="line">    <span class="attr">lastName</span>: <span class="string">'Flintstone'</span></div><div class="line">  &#125;)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(response);</div><div class="line">  &#125;)</div><div class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(error);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<h3 id="执行多个并发请求"><a href="#执行多个并发请求" class="headerlink" title="执行多个并发请求"></a>执行多个并发请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserAccount</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> axios.get(<span class="string">'/user/12345'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserPermissions</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> axios.get(<span class="string">'/user/12345/permissions'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">axios.all([getUserAccount(), getUserPermissions()])</div><div class="line">  .then(axios.spread(<span class="function"><span class="keyword">function</span> (<span class="params">acct, perms</span>) </span>&#123;</div><div class="line">    <span class="comment">//两个请求现已完成</span></div><div class="line">  &#125;));</div></pre></td></tr></table></figure>
<h2 id="axios-API"><a href="#axios-API" class="headerlink" title="axios API"></a>axios API</h2><hr>
<p>可以通过将相关配置传递给 axios 来进行请求。</p>
<h3 id="axios-config"><a href="#axios-config" class="headerlink" title="axios(config)"></a>axios(config)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 发送一个 POST 请求</span></div><div class="line">axios(&#123;</div><div class="line">  <span class="attr">method</span>: <span class="string">'post'</span>,</div><div class="line">  <span class="attr">url</span>: <span class="string">'/user/12345'</span>,</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">firstName</span>: <span class="string">'Fred'</span>,</div><div class="line">    <span class="attr">lastName</span>: <span class="string">'Flintstone'</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="axios-url-config"><a href="#axios-url-config" class="headerlink" title="axios(url[, config])"></a>axios(url[, config])</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 发送一个 GET 请求 (GET请求是默认请求模式)</span></div><div class="line">axios(<span class="string">'/user/12345'</span>);</div></pre></td></tr></table></figure>
<h3 id="请求方法别名"><a href="#请求方法别名" class="headerlink" title="请求方法别名"></a>请求方法别名</h3><p>为了方便起见，已经为所有支持的请求方法提供了别名。</p>
<ul>
<li>axios.request（config）</li>
<li>axios.get（url [，config]）</li>
<li>axios.delete（url [，config]）</li>
<li>axios.head（url [，config]）</li>
<li>axios.post（url [，data [，config]]）</li>
<li>axios.put（url [，data [，config]]）</li>
<li>axios.patch（url [，data [，config]]）</li>
</ul>
<p><strong>注意</strong><br>当使用别名方法时，不需要在config中指定url，method和data属性。</p>
<h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>帮助函数处理并发请求。</p>
<ul>
<li>axios.all（iterable）</li>
<li>axios.spread（callback）</li>
</ul>
<h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><p>您可以使用自定义配置创建axios的新实例。</p>
<p>axios.create（[config]）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> instance = axios.create(&#123;</div><div class="line">  <span class="attr">baseURL</span>: <span class="string">'https://some-domain.com/api/'</span>,</div><div class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>,</div><div class="line">  <span class="attr">headers</span>: &#123;<span class="string">'X-Custom-Header'</span>: <span class="string">'foobar'</span>&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><p>可用的实例方法如下所示。 指定的配置将与实例配置合并。</p>
<p>axios＃request（config）<br>axios＃get（url [，config]）<br>axios＃delete（url [，config]）<br>axios＃head（url [，config]）<br>axios＃post（url [，data [，config]]）<br>axios＃put（url [，data [，config]]）<br>axios＃patch（url [，data [，config]]）</p>
<h2 id="请求配置"><a href="#请求配置" class="headerlink" title="请求配置"></a>请求配置</h2><hr>
<p>这些是用于发出请求的可用配置选项。 只有url是必需的。 如果未指定方法，请求将默认为GET。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="comment">// `url`是将用于请求的服务器URL</span></div><div class="line">  url: <span class="string">'/user'</span>,</div><div class="line"></div><div class="line">  <span class="comment">// `method`是发出请求时使用的请求方法</span></div><div class="line">  method: <span class="string">'get'</span>, <span class="comment">// 默认</span></div><div class="line"></div><div class="line">  <span class="comment">// `baseURL`将被添加到`url`前面，除非`url`是绝对的。</span></div><div class="line">  <span class="comment">// 可以方便地为 axios 的实例设置`baseURL`，以便将相对 URL 传递给该实例的方法。</span></div><div class="line">  baseURL: <span class="string">'https://some-domain.com/api/'</span>,</div><div class="line"></div><div class="line">  <span class="comment">// `transformRequest`允许在请求数据发送到服务器之前对其进行更改</span></div><div class="line">  <span class="comment">// 这只适用于请求方法'PUT'，'POST'和'PATCH'</span></div><div class="line">  <span class="comment">// 数组中的最后一个函数必须返回一个字符串，一个 ArrayBuffer或一个 Stream</span></div><div class="line"></div><div class="line">  transformRequest: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="comment">// 做任何你想要的数据转换</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">  &#125;],</div><div class="line"></div><div class="line">  <span class="comment">// `transformResponse`允许在 then / catch之前对响应数据进行更改</span></div><div class="line">  transformResponse: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="comment">// Do whatever you want to transform the data</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">  &#125;],</div><div class="line"></div><div class="line">  <span class="comment">// `headers`是要发送的自定义 headers</span></div><div class="line">  headers: &#123;<span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>&#125;,</div><div class="line"></div><div class="line">  <span class="comment">// `params`是要与请求一起发送的URL参数</span></div><div class="line">  <span class="comment">// 必须是纯对象或URLSearchParams对象</span></div><div class="line">  params: &#123;</div><div class="line">    <span class="attr">ID</span>: <span class="number">12345</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// `paramsSerializer`是一个可选的函数，负责序列化`params`</span></div><div class="line">  <span class="comment">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></div><div class="line">  paramsSerializer: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> Qs.stringify(params, &#123;<span class="attr">arrayFormat</span>: <span class="string">'brackets'</span>&#125;)</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// `data`是要作为请求主体发送的数据</span></div><div class="line">  <span class="comment">// 仅适用于请求方法“PUT”，“POST”和“PATCH”</span></div><div class="line">  <span class="comment">// 当没有设置`transformRequest`时，必须是以下类型之一：</span></div><div class="line">  <span class="comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></div><div class="line">  <span class="comment">// - Browser only: FormData, File, Blob</span></div><div class="line">  <span class="comment">// - Node only: Stream</span></div><div class="line">  data: &#123;</div><div class="line">    <span class="attr">firstName</span>: <span class="string">'Fred'</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// `timeout`指定请求超时之前的毫秒数。</span></div><div class="line">  <span class="comment">// 如果请求的时间超过'timeout'，请求将被中止。</span></div><div class="line">  timeout: <span class="number">1000</span>,</div><div class="line"></div><div class="line">  <span class="comment">// `withCredentials`指示是否跨站点访问控制请求</span></div><div class="line">  <span class="comment">// should be made using credentials</span></div><div class="line">  withCredentials: <span class="literal">false</span>, <span class="comment">// default</span></div><div class="line"></div><div class="line">  <span class="comment">// `adapter'允许自定义处理请求，这使得测试更容易。</span></div><div class="line">  <span class="comment">// 返回一个promise并提供一个有效的响应（参见[response docs]（＃response-api））</span></div><div class="line">  adapter: <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</div><div class="line">    <span class="comment">/* ... */</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// `auth'表示应该使用 HTTP 基本认证，并提供凭据。</span></div><div class="line">  <span class="comment">// 这将设置一个`Authorization'头，覆盖任何现有的`Authorization'自定义头，使用`headers`设置。</span></div><div class="line">  auth: &#123;</div><div class="line">    <span class="attr">username</span>: <span class="string">'janedoe'</span>,</div><div class="line">    <span class="attr">password</span>: <span class="string">'s00pers3cret'</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// “responseType”表示服务器将响应的数据类型</span></div><div class="line">  <span class="comment">// 包括 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'</span></div><div class="line">  responseType: <span class="string">'json'</span>, <span class="comment">// default</span></div><div class="line"></div><div class="line">  <span class="comment">//`xsrfCookieName`是要用作 xsrf 令牌的值的cookie的名称</span></div><div class="line">  xsrfCookieName: <span class="string">'XSRF-TOKEN'</span>, <span class="comment">// default</span></div><div class="line"></div><div class="line">  <span class="comment">// `xsrfHeaderName`是携带xsrf令牌值的http头的名称</span></div><div class="line">  xsrfHeaderName: <span class="string">'X-XSRF-TOKEN'</span>, <span class="comment">// default</span></div><div class="line"></div><div class="line">  <span class="comment">// `onUploadProgress`允许处理上传的进度事件</span></div><div class="line">  onUploadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</div><div class="line">    <span class="comment">// 使用本地 progress 事件做任何你想要做的</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// `onDownloadProgress`允许处理下载的进度事件</span></div><div class="line">  onDownloadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</div><div class="line">    <span class="comment">// Do whatever you want with the native progress event</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// `maxContentLength`定义允许的http响应内容的最大大小</span></div><div class="line">  maxContentLength: <span class="number">2000</span>,</div><div class="line"></div><div class="line">  <span class="comment">// `validateStatus`定义是否解析或拒绝给定的promise</span></div><div class="line">  <span class="comment">// HTTP响应状态码。如果`validateStatus`返回`true`（或被设置为`null` promise将被解析;否则，promise将被</span></div><div class="line">  <span class="comment">// 拒绝。</span></div><div class="line">  validateStatus: <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">// default</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// `maxRedirects`定义在node.js中要遵循的重定向的最大数量。</span></div><div class="line">  <span class="comment">// 如果设置为0，则不会遵循重定向。</span></div><div class="line">  maxRedirects: <span class="number">5</span>, <span class="comment">// 默认</span></div><div class="line"></div><div class="line">  <span class="comment">// `httpAgent`和`httpsAgent`用于定义在node.js中分别执行http和https请求时使用的自定义代理。</span></div><div class="line">  <span class="comment">// 允许配置类似`keepAlive`的选项，</span></div><div class="line">  <span class="comment">// 默认情况下不启用。</span></div><div class="line">  httpAgent: <span class="keyword">new</span> http.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</div><div class="line">  <span class="attr">httpsAgent</span>: <span class="keyword">new</span> https.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</div><div class="line"></div><div class="line">  <span class="comment">// 'proxy'定义代理服务器的主机名和端口</span></div><div class="line">  <span class="comment">// `auth`表示HTTP Basic auth应该用于连接到代理，并提供credentials。</span></div><div class="line">  <span class="comment">// 这将设置一个`Proxy-Authorization` header，覆盖任何使用`headers`设置的现有的`Proxy-Authorization` 自定义 headers。</span></div><div class="line">  proxy: &#123;</div><div class="line">    <span class="attr">host</span>: <span class="string">'127.0.0.1'</span>,</div><div class="line">    <span class="attr">port</span>: <span class="number">9000</span>,</div><div class="line">    <span class="attr">auth</span>: : &#123;</div><div class="line">      <span class="attr">username</span>: <span class="string">'mikeymike'</span>,</div><div class="line">      <span class="attr">password</span>: <span class="string">'rapunz3l'</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// “cancelToken”指定可用于取消请求的取消令牌</span></div><div class="line">  <span class="comment">// (see Cancellation section below for details)</span></div><div class="line">  cancelToken: <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> (<span class="params">cancel</span>) </span>&#123;</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用 then 时，您将收到如下响应：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">axios.get(<span class="string">'/user/12345'</span>)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(response.data);</div><div class="line">    <span class="built_in">console</span>.log(response.status);</div><div class="line">    <span class="built_in">console</span>.log(response.statusText);</div><div class="line">    <span class="built_in">console</span>.log(response.headers);</div><div class="line">    <span class="built_in">console</span>.log(response.config);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<h2 id="配置默认值"><a href="#配置默认值" class="headerlink" title="配置默认值"></a>配置默认值</h2><hr>
<p>您可以指定将应用于每个请求的配置默认值。</p>
<h3 id="全局axios默认值"><a href="#全局axios默认值" class="headerlink" title="全局axios默认值"></a>全局axios默认值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">axios.defaults.baseURL = <span class="string">'https://api.example.com'</span>;</div><div class="line">axios.defaults.headers.common[<span class="string">'Authorization'</span>] = AUTH_TOKEN;</div><div class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span>;</div></pre></td></tr></table></figure>
<h3 id="自定义实例默认值"><a href="#自定义实例默认值" class="headerlink" title="自定义实例默认值"></a>自定义实例默认值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在创建实例时设置配置默认值</span></div><div class="line"><span class="keyword">var</span> instance = axios.create（&#123;</div><div class="line">   baseURL：<span class="string">'https://api.example.com'</span></div><div class="line">&#125;）;</div><div class="line"> </div><div class="line"><span class="comment">//在实例创建后改变默认值</span></div><div class="line">instance.defaults.headers.common [<span class="string">'Authorization'</span>] = AUTH_TOKEN;</div></pre></td></tr></table></figure>
<h3 id="配置优先级顺序"><a href="#配置优先级顺序" class="headerlink" title="配置优先级顺序"></a>配置优先级顺序</h3><p>配置将与优先顺序合并。 顺序是lib / defaults.js中的库默认值，然后是实例的defaults属性，最后是请求的config参数。 后者将优先于前者。 这里有一个例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用库提供的配置默认值创建实例</span></div><div class="line"><span class="comment">//此时，超时配置值为`0`，这是库的默认值</span></div><div class="line"><span class="keyword">var</span> instance = axios.create（）;</div><div class="line"> </div><div class="line"><span class="comment">//覆盖库的超时默认值</span></div><div class="line"><span class="comment">//现在所有请求将在超时前等待2.5秒</span></div><div class="line">instance.defaults.timeout = <span class="number">2500</span>;</div><div class="line"> </div><div class="line"><span class="comment">//覆盖此请求的超时，因为它知道需要很长时间</span></div><div class="line">instance.get（<span class="string">'/ longRequest'</span>，&#123;</div><div class="line">   timeout：<span class="number">5000</span></div><div class="line">&#125;）;</div></pre></td></tr></table></figure>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><hr>
<p>你可以截取请求或响应在被 then 或者 catch 处理之前</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//添加请求拦截器</span></div><div class="line">axios.interceptors.request.use（<span class="function"><span class="keyword">function</span>（<span class="title">config</span>）</span>&#123;</div><div class="line">     <span class="comment">//在发送请求之前做某事</span></div><div class="line">     <span class="keyword">return</span> config;</div><div class="line">   &#125;，<span class="function"><span class="keyword">function</span>（<span class="title">error</span>）</span>&#123;</div><div class="line">     <span class="comment">//请求错误时做些事</span></div><div class="line">     <span class="keyword">return</span> <span class="built_in">Promise</span>.reject（error）;</div><div class="line">   &#125;）;</div><div class="line"> </div><div class="line"><span class="comment">//添加响应拦截器</span></div><div class="line">axios.interceptors.response.use（<span class="function"><span class="keyword">function</span>（<span class="title">response</span>）</span>&#123;</div><div class="line">     <span class="comment">//对响应数据做些事</span></div><div class="line">      <span class="keyword">return</span> response;</div><div class="line">   &#125;，<span class="function"><span class="keyword">function</span>（<span class="title">error</span>）</span>&#123;</div><div class="line">     <span class="comment">//请求错误时做些事</span></div><div class="line">     <span class="keyword">return</span> <span class="built_in">Promise</span>.reject（error）;</div><div class="line">   &#125;）;</div></pre></td></tr></table></figure>
<p>如果你以后可能需要删除拦截器。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myInterceptor = axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span>&#125;);</div><div class="line">axios.interceptors.request.eject(myInterceptor);</div></pre></td></tr></table></figure>
<p>你可以将拦截器添加到axios的自定义实例。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> instance = axios.create();</div><div class="line">instance.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span>&#125;);</div></pre></td></tr></table></figure>
<h2 id="处理错误"><a href="#处理错误" class="headerlink" title="处理错误"></a>处理错误</h2><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">axios.get（<span class="string">'/ user / 12345'</span>）</div><div class="line">   .catch（<span class="function"><span class="keyword">function</span>（<span class="title">error</span>）</span>&#123;</div><div class="line">     <span class="keyword">if</span>（error.response）&#123;</div><div class="line">       <span class="comment">//请求已发出，但服务器使用状态代码进行响应</span></div><div class="line">       <span class="comment">//落在2xx的范围之外</span></div><div class="line">       <span class="built_in">console</span>.log（error.response.data）;</div><div class="line">       <span class="built_in">console</span>.log（error.response.status）;</div><div class="line">       <span class="built_in">console</span>.log（error.response.headers）;</div><div class="line">     &#125; <span class="keyword">else</span> &#123;</div><div class="line">       <span class="comment">//在设置触发错误的请求时发生了错误</span></div><div class="line">       <span class="built_in">console</span>.log（<span class="string">'Error'</span>，error.message）;</div><div class="line">     &#125;&#125;</div><div class="line">     <span class="built_in">console</span>.log（error.config）;</div><div class="line">   &#125;）;</div></pre></td></tr></table></figure>
<p>您可以使用validateStatus配置选项定义自定义HTTP状态码错误范围。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">axios.get（<span class="string">'/ user / 12345'</span>，&#123;</div><div class="line">   validateStatus：<span class="function"><span class="keyword">function</span>（<span class="title">status</span>）</span>&#123;</div><div class="line">     <span class="keyword">return</span> status &lt; <span class="number">500</span>; <span class="comment">//仅当状态代码大于或等于500时拒绝</span></div><div class="line">   &#125;&#125;</div><div class="line">&#125;）</div></pre></td></tr></table></figure>
<h2 id="消除"><a href="#消除" class="headerlink" title="消除"></a>消除</h2><hr>
<p>您可以使用取消令牌取消请求。</p>
<blockquote>
<p>axios cancel token API基于可取消的promise提议，目前处于阶段1。  </p>
</blockquote>
<p>您可以使用CancelToken.source工厂创建一个取消令牌，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> CancelToken = axios.CancelToken;</div><div class="line"><span class="keyword">var</span> source = CancelToken.source（）;</div><div class="line"></div><div class="line">axios.get(<span class="string">'/user/12345'</span>, &#123;</div><div class="line">  <span class="attr">cancelToken</span>: source.token</div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">thrown</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (axios.isCancel(thrown)) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Request canceled'</span>, thrown.message);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 处理错误</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//取消请求（消息参数是可选的）</span></div><div class="line">source.cancel（<span class="string">'操作被用户取消。'</span>）;</div></pre></td></tr></table></figure>
<p>您还可以通过将执行器函数传递给CancelToken构造函数来创建取消令牌：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> CancelToken = axios.CancelToken;</div><div class="line"><span class="keyword">var</span> cancel;</div><div class="line"> </div><div class="line">axios.get（<span class="string">'/ user / 12345'</span>，&#123;</div><div class="line">   cancelToken：<span class="keyword">new</span> CancelToken（<span class="function"><span class="keyword">function</span> <span class="title">executor</span>（<span class="title">c</span>）</span>&#123;</div><div class="line">     <span class="comment">//一个执行器函数接收一个取消函数作为参数</span></div><div class="line">     cancel = c;</div><div class="line">   &#125;）</div><div class="line">&#125;）;</div><div class="line"> </div><div class="line"><span class="comment">// 取消请求</span></div><div class="line">clear();</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：您可以使用相同的取消令牌取消几个请求。  </p>
</blockquote>
<h2 id="使用application-x-www-form-urlencoded格式"><a href="#使用application-x-www-form-urlencoded格式" class="headerlink" title="使用application / x-www-form-urlencoded格式"></a>使用application / x-www-form-urlencoded格式</h2><hr>
<p>默认情况下，axios将JavaScript对象序列化为JSON。 要以应用程序/ x-www-form-urlencoded格式发送数据，您可以使用以下选项之一。</p>
<h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><p>在浏览器中，您可以使用URLSearchParams API，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> params = <span class="keyword">new</span> URLSearchParams();</div><div class="line">params.append(<span class="string">'param1'</span>, <span class="string">'value1'</span>);</div><div class="line">params.append(<span class="string">'param2'</span>, <span class="string">'value2'</span>);</div><div class="line">axios.post(<span class="string">'/foo'</span>, params);</div></pre></td></tr></table></figure>
<blockquote>
<p>请注意，所有浏览器都不支持URLSearchParams，但是有一个polyfill可用（确保polyfill全局环境）。  </p>
</blockquote>
<p>或者，您可以使用qs库对数据进行编码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">'qs'</span>);</div><div class="line">axios.post(<span class="string">'/foo'</span>, qs.stringify(&#123; <span class="string">'bar'</span>: <span class="number">123</span> &#125;);</div></pre></td></tr></table></figure>
<h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>在node.js中，可以使用querystring模块，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</div><div class="line">axios.post(<span class="string">'http://something.com/'</span>, querystring.stringify(&#123; <span class="attr">foo</span>: <span class="string">'bar'</span> &#125;);</div></pre></td></tr></table></figure>
<p>你也可以使用qs库。</p>
<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><hr>
<p>axios 依赖本机要支持ES6 Promise实现。 如果您的环境不支持ES6 Promises，您可以使用polyfill。</p>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><hr>
<p>axios包括TypeScript定义。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</div><div class="line">axios.get(<span class="string">'/user?ID=12345'</span>);</div></pre></td></tr></table></figure>
<hr>
<p>axios在很大程度上受到Angular提供的$http服务的启发。 最终，axios努力提供一个在Angular外使用的独立的$http-like服务。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着 vuejs 作者尤雨溪发布消息，不再继续维护vue-resource，并推荐大家使用 axios 开始，axios 被越来越多的人所了解。本来想在网上找找详细攻略，突然发现，axios 的官方文档本身就非常详细！！有这个还要什么自行车！！所以推荐大家学习这种库，最好详细阅读其官方文档。大概翻译了一下 axios 的官方文档，相信大家只要吃透本文再加以实践，axios 就是小意思啦！！&lt;/p&gt;
&lt;p&gt;如果您觉得本文对您有帮助，不妨点个赞或关注收藏一下，您的鼓励对我非常重要。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://ykloveyxk.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>svg图标文件引入小技巧</title>
    <link href="https://ykloveyxk.github.io/2017/01/17/svg%E5%9B%BE%E6%A0%87%E6%96%87%E4%BB%B6%E5%BC%95%E5%85%A5%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>https://ykloveyxk.github.io/2017/01/17/svg图标文件引入小技巧/</id>
    <published>2017-01-17T08:57:17.000Z</published>
    <updated>2017-01-17T08:59:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天刚刚get到的一个小技能，忍不住想和大家分享一下，万一有同学不太懂，刚好也可以学习一下（ps：知道的同学可以帮我斧正，感谢！）。惯例，先来简单介绍一下 svg，虽然相信大家都懂😓:</p>
<a id="more"></a>
<blockquote>
<p><a href="http://baike.baidu.com/link?url=XgUZoMKppO_GNu2mOqeMGPw6tHR_ONFgZwu9RPjrPnVTSt0NY_CoD729oxZAIt8sU9dQB7FOmaR69t7S8ZHJla" target="_blank" rel="external">SVG（可缩放矢量图形）_百度百科</a>  </p>
<p>svg（可缩放矢量图形）是基于可扩展标记语言（标准通用标记语言的子集），用于描述二维矢量图形的一种图形格式。它由万维网联盟制定，是一个开放标准。  </p>
</blockquote>
<p>简单的说就是它是一种矢量图形，体积小，高保真，放大放小都不失真。</p>
<p>直接引入svg文件的方式，有以下几种：</p>
<hr>
<ol>
<li>img 标签引入;</li>
<li>css 属性 <em>background-image: url(‘svg’);</em> 引入;</li>
<li>使用 object 标签引入 ;</li>
<li>iframe 标签引入;</li>
<li>embed 标签引入;</li>
<li>svg 标签引入;</li>
</ol>
<hr>
<p>但是上面的几种方法，除去方法2，都有个共同特点，都是<strong>通过一个标签来引入一个svg文件</strong>。但是在实际的开发过程中，需要加载的图标文件数目可能会有很多（尤其在移动端），因此采用标签加载的方式，会导致代码冗余，不美观，且不易维护和阅读。因此，在加载图标文件的时候，我们应该效仿 font-awesome 的加载方式。通过 <strong>图标字体文件 &amp; css</strong> 这种方式来实现。这样做最显著的优势就是，图标加载方式得到了简化和放宽。</p>
<p>以font-awesome为例，在引入图标字体文件和相关css文件的基础上，加载图标只需为标签添加class属性。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">‘fa</span> <span class="attr">fa-star</span>’&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这样就使得svg加载非常灵活和简洁。但是如何将自己设计的svg图标转化为字体图标文件，就用到我们接下来的一个小方法：</p>
<ol>
<li>首先登陆一个网站（免费哒）： <a href="https://icomoon.io/" target="_blank" rel="external">Icon Font &amp; SVG Icon Sets ❍ IcoMoon</a></li>
<li>点击右上方的 <strong>IcoMoon App</strong> 按钮；</li>
<li>在新载入页面中，点击左上方的 <strong>Import Icons</strong> 按钮，选择自己需要引入的 .svg 图标；</li>
<li>在预览界面选中需要包含的图标后，点击右下方的 Generate Font 按钮；</li>
<li>接着将鼠标置于我们加载的图标上方，点击 Get Code 查看如何引入这个图标（看看多贴心）；</li>
<li>最后download ，引入字体文件和css文件。就可以调用啦。</li>
</ol>
<hr>
<p>这只是实际开发中的一个小技巧，小方法，分享给还不知道的人。谢谢。当然觉得有用的话，不妨点个赞鼓励下（羞射）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天刚刚get到的一个小技能，忍不住想和大家分享一下，万一有同学不太懂，刚好也可以学习一下（ps：知道的同学可以帮我斧正，感谢！）。惯例，先来简单介绍一下 svg，虽然相信大家都懂😓:&lt;/p&gt;
    
    </summary>
    
    
      <category term="svg" scheme="https://ykloveyxk.github.io/tags/svg/"/>
    
  </entry>
  
  <entry>
    <title>浅谈javascript垃圾收集机制</title>
    <link href="https://ykloveyxk.github.io/2017/01/03/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86/"/>
    <id>https://ykloveyxk.github.io/2017/01/03/垃圾收集/</id>
    <published>2017-01-03T00:00:32.000Z</published>
    <updated>2017-01-03T08:28:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为已经研二了，眼看就要找工作了，心中很忐忑。好怕面试官当众吊打我，真的好怕好怕……所以想着开个博客，整理分享一些js的基础知识，充实自己的同时，也能分享给需要的人。</p>
<hr>
<p>今天想要分享的小知识，是关于javascript的垃圾收集机制（GC(Garbage Collection) ）。<br><a id="more"></a></p>
<h2 id="自动垃圾收集机制"><a href="#自动垃圾收集机制" class="headerlink" title="自动垃圾收集机制"></a>自动垃圾收集机制</h2><p>不同于C/C++需要编程人员手动跟踪内存的使用情况，javascript拥有一套<strong>自动垃圾收集机制</strong>，也就是说，在我们的开发过程中，并不用去考虑内存的分配和回收问题，这些问题都由执行环境负责，它自动管理代码执行过程中内存的分配与回收，让编码人员能将更多精力放在业务功能实现。而手动跟踪内存自身也有其弊端，例如很繁琐，变量数目很多时人工操作很容易遗漏，造成资源浪费等。</p>
<p>自动垃圾收集机制，它的原理其实很简单：<br>    <u>确定变量中有哪些还在使用，哪些已经不再使用，然后垃圾收集器会按照固定的时间间隔去周期性的释放已经不再继续使用的变量所占的内存。</u></p>
<p>但是怎么界定变量有没有被使用，就需要考虑它的生命周期。 </p>
<h2 id="变量的生命周期"><a href="#变量的生命周期" class="headerlink" title="变量的生命周期"></a>变量的生命周期</h2><p>在不考虑卸载页面，注销系统的基础上，全局变量是一直都会存在的，因为系统不明确什么时候还会用到它，所以全局变量通常不会被垃圾收集机制所回收。js面试中的另一个特色问题<strong>闭包</strong>之所以能够在函数外部读取函数内部局部变量，保证该局部变量不被垃圾收集器回收，就是因为定义了一个外部引用，使得整个函数与全局变量连接在一起。（说的比较笼统，之后在闭包部分详述）</p>
<p>而局部变量只在函数执行的过程中存在，在这个过程中，会为局部变量分配内存空间，用来储存它的值。当函数结束时，局部变量就可以界定为不再继续使用，于是就会释放它的内存。但这只是很简单的一种情况，随着实现的不同，垃圾收集器对“有用”，“无用”的标示策略也不同，总体来说，有以下两种：</p>
<ol>
<li>标记清除</li>
<li>引用计数</li>
</ol>
<h2 id="标记清除法"><a href="#标记清除法" class="headerlink" title="标记清除法"></a>标记清除法</h2><p>标记清除是javascript中最常用的垃圾收集机制。简单的来说就是：变量进入<strong>环境</strong>(即执行上下文，例如全局环境、函数环境)，标记该变量进入环境；出环境则标记变量离开环境。</p>
<p>然后垃圾收集器会保留环境中的变量和被环境中变量引用的变量（其实就是闭包），定时循环释放除此之外的离开环境的变量的内存。大多现代浏览器都采取这个策略进行垃圾收集，它们之间的区别在于垃圾收集器的回收间隔时间。</p>
<h2 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h2><blockquote>
<p>要明确引用计数法，首先需要了解什么是引用？</p>
<p>此处的引用是指一个对象对另一个对象的访问权限，可以访问，则表示这个对象引用另一个对象。</p>
</blockquote>
<p>引用计数法并不常用，出现在IE早期，它的原理也很简单：跟踪每个值被引用的次数，当声明变量并赋给他一个引用类型的值时，则该值引用次数为1，将其赋给另一个变量时，引用次数就变为2，以此类推；相反，如果引用这个值的那个变量引用了别的值，那么这个值的引用次数就减1，当然新引用的那个值的次数加1。最后，当次数变为0时，则默认改值已不再被需要，就会被回收器回收。</p>
<p>但是该方法有一个巨大缺陷，就是它存在循环引用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">referenceCount</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> variable_a = &#123;&#125;;</div><div class="line">	<span class="keyword">var</span> variable_b = &#123;&#125;;</div><div class="line">	variable_a.prop = variable_b;</div><div class="line">	variable_b.prop = variable_a;</div><div class="line">&#125;</div><div class="line">referenceCount();</div></pre></td></tr></table></figure></p>
<p>此时variable_a, variable_b通过各自属性相互引用，但是函数已经执行完毕，本来应该将这两个对象所占内存释放，但在引用计数法中它们不会被回收。</p>
<hr>
<p>以上，就是关于javascript中垃圾收集机制的一些简单介绍。虽然它可能对我们实际编程意义不大，但是对我们了解javascript这门语言的运行机制，还是很有帮助的。因为我也是前端届的小学生，如有问题，希望大家严厉指出，谢谢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为已经研二了，眼看就要找工作了，心中很忐忑。好怕面试官当众吊打我，真的好怕好怕……所以想着开个博客，整理分享一些js的基础知识，充实自己的同时，也能分享给需要的人。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今天想要分享的小知识，是关于javascript的垃圾收集机制（GC(Garbage Collection) ）。&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://ykloveyxk.github.io/tags/javascript/"/>
    
  </entry>
  
</feed>
